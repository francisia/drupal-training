<?php
/**
 * @file
 * jdt_user_notes module .module file
 */

/**
 * Implements hook_menu().
 */
function jdt_user_notes_menu() {
  $items['node/%node/notelist'] = array(
    'title' => 'View notes',
    'description' => 'View all notes associated with this article.',
    'page callback' => 'jdt_user_notes_note_list_page',
    'page arguments' => array(1),
    'access callback' => 'jdt_user_notes_note_access_callback',
    'access arguments' => array('view notes', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['node/%node/addnote'] = array(
    'title' => 'Add note',
    'description' => 'Add note.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jdt_user_notes_add_note_form', 1),
    'access callback' => 'jdt_user_notes_note_access_callback',
    'access arguments' => array('add note', 1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'jdt_user_notes.forms.inc',
  );
  $items['note/%jdt_user_notes_note/edit'] = array(
    'title' => 'Edit notes',
    'description' => 'Edit notes.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jdt_user_notes_edit_note_form', 1),
    'access callback' => 'jdt_user_notes_edit_note_access_callback',
    'access arguments' => array('edit note', 1),
    'file' => 'jdt_user_notes.forms.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function jdt_user_notes_theme($existing, $type, $theme, $path) {
  return array(
    'jdt_user_notes_template' => array(
      'variables' => array(
        'note' => NULL,
        'username' => NULL,
      ),
      'template' => 'jdt_user_notes_template',
    ),
    'jdt_user_notes_block' => array(
      'variables' => array(
        'header' => NULL,
        'rows' => NULL,
      ),
    ),
  );
}

/**
 * Displays the page with a list of notes associated with a specific article.
 */
function jdt_user_notes_note_list_page($article) {
  global $user;
  module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.admin');
  $note_list = jdt_user_notes_get_notes($article->nid);
  $output = array();
  foreach ($note_list as $note) {
    $output[] = array(
      '#theme' => 'jdt_user_notes_template',
      '#type' => 'markup',
      '#note' => $note,
      '#username' => $user->name,
    );
  }
  return $output;
}

/**
 * Implements hook_block_info().
 */
function jdt_user_notes_block_info() {
  $blocks['jdt_user_notes'] = array(
    'info' => t('User notes'),
    'weight' => -11,
    'status' => 1,
    'region' => 'content',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'article/*',
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generates a block with a list of notes associated with a specific article.
 */
function jdt_user_notes_block_view($delta = '') {
  $article = menu_get_object();
  if ((jdt_user_notes_user_is_admin() || user_access('view notes'))) {
    $block['subject'] = t('User notes');
    $block['content'] = jdt_user_notes_block_build_contents($article->nid);

    return $block;
  }
}

/**
 * Generates content for the note list block.
 */
function jdt_user_notes_block_build_contents($article_id) {
  module_load_include('inc', 'jdt_user_notes', 'jdt_user_notes.admin');
  $note_list = jdt_user_notes_get_notes($article_id);
  $header = array(t('Notes'), t('Actions'));
  $rows = array();
  foreach ($note_list as $note) {
    $rows[] = array(
      $note->note_text,
      l(t('Edit'), '../note/' . $note->note_id . '/edit'),
    );
  }

  if ($rows) {
    return theme('jdt_user_notes_block', array('header' => $header, 'rows' => $rows));
  }
  else {
    return t('No notes available on this article.');
  }
}

/**
 * Returns table of user notes to be displayed in the jdt user notes block.
 */
function theme_jdt_user_notes_block($info) {
  $variables = array(
    'header' => $info['header'],
    'rows' => $info['rows'],
  );
  return theme('table', $variables);
}

/**
 * Loads the note object.
 */
function jdt_user_notes_note_load($note_id) {
  $result = db_select('jdt_user_notes_article_notes', 'jun')
    ->fields('jun')
    ->condition('note_id', $note_id)
    ->execute()
    ->fetchObject();
  return $result;
}

/**
 * Checks if current user is an administrator.
 */
function jdt_user_notes_user_is_admin() {
  global $user;
  return in_array('administrator', $user->roles);
}

/**
 * Access callback function to view notes or add a note to article.
 */
function jdt_user_notes_note_access_callback($perm, $node) {
  return $node->type == 'article2' && (jdt_user_notes_user_is_admin() || user_access($perm));
}

/**
 * Access callback function to edit a note.
 */
function jdt_user_notes_edit_note_access_callback($perm, $note) {
  global $user;
  return jdt_user_notes_user_is_admin() || ($user->uid == $note->author_uid && user_access($perm));
}

/**
 * Implements hook_permission().
 */
function jdt_user_notes_permission() {
  return array(
    'view notes' => array(
      'title' => t('View notes'),
      'description' => t('View all notes associated with a specific article'),
    ),
    'add note' => array(
      'title' => t('Add note'),
      'description' => t('Add notes to articles'),
    ),
    'edit note' => array(
      'title' => t('Edit note'),
      'description' => t('Edit notes on articles'),
      'restrict access' => TRUE,
    ),
    'delete note' => array(
      'title' => t('Delete note'),
      'description' => t('Delete notes from articles'),
      'restrict access' => TRUE,
    ),
  );
}
